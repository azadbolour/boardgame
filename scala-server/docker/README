
Dockerization of the Scala Server

There are two docker images: the packager and the server. 

The packager is used to build and package the application from source.
Its output is a Play distribution package in zip form (scala-server-<version>),
and a few bash scripts needed to start the application.

The server uses the output of the packager to install the application (when
the docker image is built) and to run the application (when the docker image is run).

The packager and the server are independent of each other as docker images.
So the packager uses a mapped volume to output the package to the host
machine, and the server has to copy the package and install it in its build
phase.

By convention the host directory /opt/data/boardgame/package (known as the
PACKAGE_DIR) is used as the output of the packager and the input of the
server build process.

Commands

Assume we are building version 0.9.5 of the server. 

Make sure $WORKSPACE/scala-server/build.sbt and $WORKSPACE/web-ui/package.json
have this version (to keep the source and the docker images versions consistent).

Build the package docker image.

    build-packager.sh azadbolour 0.9.5

Run the package container. Outputs the distribution to /opt/data/boardgame/package/.

    run-docker-packager.sh --tag 0.9.5

Build the server docker image.

    build-server.sh azadbolour 0.9.5 /opt/data/boardgame/package

Test the server.

    run-here.sh "$host:6597" 

The port number is provided in the script $WORKSPACE/scala-server/run-server.sh. 
For the purposes of this scenario consider it hard-coded to 6597. The host is
the DNS host or IP address through which the game application is to be
accessed. The game can then be accessed at:

    $host:6597/boardgame 

Push to Docker Hub.

    docker push azadbolour/boardgame-scala-server:0.9.5

Pull to the deployment machine.

    docker pull azadbolour/boardgame-scala-server:0.9.5
    
Deploy.
    
    run-docker-server.sh --tag 0.9.5 --allowed-host "$host:6597"

Deploy using a different port.

    run-docker-server.sh --tag 0.9.5 --allowed-host "$host:9005" --http-port 9005

Details

In a docker build, the only files that may be copied into an image are files
that are below the current working directory of the build in the host system.
Therefore, in order to be able to copy from PACKAGE_DIR, the builder script 
for the server changes directory to the PACKAGE_DIR. And since the dockerfile
must also be accessible below the current working directory, that file 
is copied to PACKAGE_DIR. In this way, the output of the packager can be used
as the input of the server build process.

The directory strucure under PACKAGE_DIR looks like:

/opt/data/boardgame/package 
  scala-server-<version>.zip
  script/
    install.sh
    run-server.sh
    ...

The installation of the package by the builder of the server image causes 
the following directory structure within the server docker image:

/usr/local/boardgame/
  scala-server-<version>/ unzipped package
  boardgame/ (symbolic link to scala-server-<version>
    bin/
    lib/
    etc/
    ...
  script
    install.sh
    run-server.sh
    ...

Play security requires an allowed hosts parameter to be provided when starting 
up the server. This is a list of host:port combinations which may be used by 
web clients to access the play server. The run script of the boardgame container
includes a --allowed-host parameter that just takes one host:port combination 
and provides it to the server. See the script run-here.sh.
